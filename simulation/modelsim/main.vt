// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/28/2022 21:09:29"
                                                                                
// Verilog Test Bench template for design : main
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module main_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg reset;
reg start_read;
reg ADC_SDAT;
// wires                                               
wire [4:0]  M;
wire [4:0]  Ma;
wire [9:0]  gate;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.M(M),
	.Ma(Ma),
	.clk(clk),
	.gate(gate),
	.reset(reset),
	.start_read(start_read),
	.iv_hold(iv_hold), 
	.iv_reset(iv_reset),
	
	.ADC_SDAT(ADC_SDAT)
);
initial begin
ADC_SDAT <= 1'b1;
clk <= 1'b0;
reset <= 1'b1;
start_read <= 1'b1;
# 400 start_read <= 1'b0;  
# 400 start_read <= 1'b1;                                           

                                            
$display("Running testbench");                       
                                        
end        

always 
#1 clk <= ~clk;                                            
endmodule

